# .github/workflows/dev-deploy.yml

name: 'Terragrunt Deploy DEV'
  
on:
  push:
    paths:
      - '.github/**'
      - 'src/**'
      - 'infra/**'
    branches:
      - '*'
      - 'feature/*'
      - '!main'
      - '!master'

env:
  TF_VAR_username: ${{secrets.USERNAME}}
  TF_VAR_terraform_user: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
  TF_VAR_terraform_pass: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }} 
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID_DEV }}
  AWS_DEPLOYER_ROLE: ${{ secrets.DEPLOYER_ROLE }}
  AWS_PROFILE: saml
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: json
  INFRA_DIR: infra/us-east-1/dev
  TG_VERSION: v0.42.8
  TF_VERSION: latest
        
    
jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
        
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
          concurrent_skipping: 'same_content_newer'
            

  build:
    needs: pre-check
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: true
      matrix:
        include:
          - src: lambda/hello/main.go
            output: lambda/bin/lambda_hello.exe
          - src: lambda/twitch/webhookCallback/main.go
            output: lambda/bin/lambda_webhook.exe
          
    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build Executables
      run: go build -o ${{ env.INFRA_DIR }}/${{matrix.output}} src/cmd/${{matrix.src}}

    - name: Upload Artifacts
      id: cache
      uses: actions/upload-artifact@v3
      with:
        name: lambdas
        path: ${{ env.INFRA_DIR }}/lambda/bin/
          
    # - name: Test
    #   run: go test -v ./...
        
          
  deploy-aws-infra:
    needs: build
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
    name: 'Deploy AWS Infra DEV'
    runs-on: ubuntu-latest
        
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambdas
        path: ${{env.INFRA_DIR}}/lambda/bin/

    # use if you need to debug workflow
    # - name: DEBUG
    #   uses: lhotari/action-upterm@v1
    #   with:
    #       limit-access-to-actor: true
    #       limit-access-to-users: Fomiller
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
        role-to-assume: arn:aws:iam::${{env.AWS_ACCOUNT_ID}}:role/${{env.AWS_DEPLOYER_ROLE}}
        aws-region: ${{env.AWS_DEFAULT_REGION}}
        role-session-name: gh-actions
          
    # - name: AWS    
    #   run: |
    #       aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEV }} --profile saml
    #       aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }} --profile saml

    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
          
    - name: Install Terragrunt ${{ env.TG_VERSION }}
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt

    - name: Terragrunt Validate
      continue-on-error: false
      run: |
        terragrunt run-all validate --terragrunt-working-dir ${{env.INFRA_DIR}}
        
    # - name: Terragrunt Plan
    #   continue-on-error: false
    #   run: |
    #     terragrunt run-all plan --terragrunt-working-dir ${{env.INFRA_DIR}}
        
    - name: Terragrunt Apply
      continue-on-error: false
      run: |
        terragrunt run-all apply --terragrunt-working-dir ${{env.INFRA_DIR}} --terragrunt-non-interactive
        
