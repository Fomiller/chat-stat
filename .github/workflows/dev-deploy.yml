# .github/workflows/dev-deploy.yml

name: 'Terragrunt Deploy DEV'
  
on:
  push:
    paths:
      - '.github/**'
      - 'src/**'
      - 'infra/**'
    branches:
      - '*'
      - 'feature/*'
      - '!main'
      - '!master'

env:
  ECR_REPO_PREFIX: 'fomiller-chat-stat'
  INFRA_DIR: infra/modules/aws
  TG_VERSION: v0.42.8
  TF_VERSION: latest
        
    
jobs:
  pre-check:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
        
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
          concurrent_skipping: 'same_content_newer'
            

  Build-Lambdas:
    needs: pre-check
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
      
    strategy:
      fail-fast: true
      matrix:
        include:
          - src: lambda/hello/main.go
            output: lambda/bin/lambda_hello.exe
          - src: lambda/twitch/webhookCallback/main.go
            output: lambda/bin/lambda_webhook.exe
          
    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build Executables
      run: go build -o ${{ env.INFRA_DIR }}/${{matrix.output}} src/cmd/${{matrix.src}}

    - name: Upload Artifacts
      id: cache
      uses: actions/upload-artifact@v3
      with:
        name: lambdas
        path: ${{ env.INFRA_DIR }}/lambda/bin/
          
    # - name: Test
    #   run: go test -v ./...
        
          
  Deploy-aws-infra:
    environment: dev
    needs: Build-Lambdas
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
    name: 'Deploy AWS Infra DEV'
    runs-on: ubuntu-latest
    env:
      TF_VAR_terraform_user: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_terraform_pass: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
      TF_VAR_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} 
      TF_VAR_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      TF_VAR_ENV: ${{ secrets.ENVIRONMENT }}
        
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: lambdas
        path: ${{env.INFRA_DIR}}/lambda/bin/

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOYER_ROLE }}
        aws-region: ${{secrets.AWS_DEFAULT_REGION}}
        role-duration-seconds: 1200

    - name: Install Terraform ${{ env.TF_VERSION }}
      uses: hashicorp/setup-Terraform@v1
      with:
        terraform_version: ${{ env.TF_VERSION }}
        terraform_wrapper: false
          
    - name: Install Terragrunt ${{ env.TG_VERSION }}
      run: |
        sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/${{ env.TG_VERSION }}/terragrunt_linux_amd64"
        sudo chmod +x /bin/terragrunt

    - name: Terragrunt Apply
      continue-on-error: false
      run: |
        terragrunt run-all apply --terragrunt-working-dir ${{env.INFRA_DIR}} --terragrunt-non-interactive
        
  Build-deploy-ecr-images:
    environment: dev
    needs: Deploy-aws-infra
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
    name: 'Build/Deploy ECR images'
    runs-on: ubuntu-latest
        
    strategy:
      fail-fast: true
      matrix:
        Repo: ['api']
              
    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOYER_ROLE }}
        aws-region: ${{secrets.AWS_DEFAULT_REGION}}
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
        
    - name: Create Unique image tag
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT 
        
    - name: Download doppler
      uses: dopplerhq/cli-action@v2
      
    - name: Download doppler secrets to .env file
      run: doppler -p chat-stat -c dev secrets download --no-file --format env > .env
      env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        build-args: |
          TWITCH_CLIENT_ID=${{secrets.TWITCH_CLIENT_ID}}
          TWITCH_CLIENT_SECRETS=${{secrets.TWITCH_CLIENT_SECRETS}}
        tags: |
          ${{steps.login-ecr.outputs.registry}}/${{env.ECR_REPO_PREFIX}}-${{matrix.Repo}}:latest
          ${{steps.login-ecr.outputs.registry}}/${{env.ECR_REPO_PREFIX}}-${{matrix.Repo}}:${{steps.vars.outputs.sha_short}}
          
    # use if you need to debug workflow
    # - name: DEBUG
    #   uses: lhotari/action-upterm@v1
    #   with:
    #       limit-access-to-actor: true
    #       limit-access-to-users: Fomiller
