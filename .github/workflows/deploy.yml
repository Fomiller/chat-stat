# .github/workflows/deploy.yml

name: 'Terragrunt Deploy'
  
on:
  push:
    paths:
      - '.github/**'
      - 'modules/**'
      - 'infra/**'
      - 'justfile'
    branches:
      - 'ci/*'
    #       - src: lambda/hello/main.go
    #         output: lambda/bin/lambda_hello.exe
    #       - src: lambda/twitch/webhookCallback/main.go
    #         output: lambda/bin/lambda_webhook.exe
        
env:
  ECR_REPO_PREFIX: 'fomiller-chat-stat'
  # INFRA_DIR: infra/modules/aws
  # TG_VERSION: v0.42.8
  # TF_VERSION: latest
   
jobs:
  Pre-check:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          cancel_others: 'true'
          concurrent_skipping: 'same_content_newer'

  Build-lambdas-hello:
    needs: Pre-check
    uses: fomiller-org/gh-actions/.github/workflows/go-lambda.yaml@generic
    with:
      lambda_src: lambda/hello/main.go
      lambda_output:  lambda/bin/lambda_hello.exe
      infra-dir: infra/modules/aws
        
  Build-lambda-twitch:
    needs: Pre-check
    uses: fomiller-org/gh-actions/.github/workflows/go-lambda.yaml@generic
    with:
      lambda_src: lambda/twitch/webhookCallback/main.go
      lambda_output:  lambda/bin/lambda_webhook.exe
      infra-dir: infra/modules/aws
        
  Deploy-infra:
    needs: [Build-lambda-twitch, Build-lambdas-hello]
    uses: fomiller-org/gh-actions/.github/workflows/terragrunt.yaml@generic
    with:
      environment: dev
      infra-dir: infra/modules/aws
      doppler-project: chat-stat
      download-artifacts: true
    secrets: inherit
        
  Build-deploy-ecr-images:
    name: 'Build/Deploy ECR images'
    runs-on: ubuntu-latest
    needs: Deploy-infra
    environment: dev
    if: ${{ (github.event.pull_request.merged == true || github.event_name == 'push') && needs.pre-check.outputs.should_skip != 'true' }}
        
    strategy:
      fail-fast: true
      matrix:
        Repo: ['api']
              
    steps:
    - name: Checkout
      uses: actions/checkout@v2
        
    - name: Download doppler
      uses: dopplerhq/cli-action@v2

    - name: Download doppler secrets to .env file
      run: doppler -p chat-stat -c dev secrets download --no-file --format env > .env
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
          
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOYER_ROLE }}
        aws-region: ${{secrets.AWS_DEFAULT_REGION}}
        role-duration-seconds: 1200
            
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
            
    - name: Create Unique image tag
      id: vars
      run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT 
          
    - name: Build and push
      uses: docker/build-push-action@v4
      env:
        REGISTRY: ${{steps.login-ecr.outputs.registry}}
        SHA: ${{steps.vars.outputs.sha_short}}
      with:
        context: .
        push: true
        build-args: |
          TWITCH_CLIENT_ID=${{secrets.TWITCH_CLIENT_ID}}
          TWITCH_CLIENT_SECRETS=${{secrets.TWITCH_CLIENT_SECRETS}}
        tags: |
          ${{env.REGISTRY}}/${{env.ECR_REPO_PREFIX}}-${{matrix.Repo}}:latest
          ${{env.REGISTRY}}/${{env.ECR_REPO_PREFIX}}-${{matrix.Repo}}:${{env.SHA}}
          
    # use if you need to debug workflow
    # - name: DEBUG
    #   uses: lhotari/action-upterm@v1
    #   with:
    #       limit-access-to-actor: true
    #       limit-access-to-users: Fomiller

