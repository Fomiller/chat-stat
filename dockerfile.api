FROM rust:1.75 AS chef 
RUN cargo install cargo-chef 
WORKDIR /app


FROM chef AS planner
COPY ./src/api .
RUN cargo chef prepare --recipe-path recipe.json


# Build dependencies - this is the caching Docker layer!
FROM chef AS builder
COPY --from=planner /app/recipe.json recipe.json

RUN cargo chef cook --release --recipe-path recipe.json

COPY ./src/api .
RUN cargo build --release

# stage 2b, build our css as we don't have a formal preprocessor
FROM node:buster-slim as node_builder

WORKDIR /app

# we'll use pnpm to ensure we're consistent across the dev and release environments
RUN corepack enable

# copy on over all the dependencies
COPY ./src/api/tailwind.config.js .
COPY ./src/api/package.json .
COPY ./src/api/styles ./styles
COPY ./src/api/assets ./assets

# we'll also copy the templates over so tailwind can scan for unused class utilities, omitting them from the final output
COPY ./src/api/templates ./templates

# build our css
RUN pnpm install
RUN pnpm dlx tailwindcss -i ./styles/tailwind.css -o ./assets/main.css


# We do not need the Rust toolchain to run the binary!
FROM debian:bookworm-slim AS runtime
WORKDIR /app
COPY --from=builder /app/target/release/api /usr/local/bin
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=node_builder /app/assets ./assets
ENTRYPOINT ["/bin/bash", "-c", "/usr/local/bin/api"]
